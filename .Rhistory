#| echo: true
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset", # name of the input (for the server)
label = "Choose a dataset:", # name of the input (for the users)
choices = c("rock", "pressure", "cars")) # options (for  both
# users & server)
),
mainPanel(
plotOutput( # define the graphical output (we're telling R that this output
"graph"   # container must contain a plot)
),
verbatimTextOutput( # define the graphical output (we're telling R that
"summary"   # this output container must contain a Verbatim output)
)
)
)
)
libr
library(shiny)
#| echo: true
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset", # name of the input (for the server)
label = "Choose a dataset:", # name of the input (for the users)
choices = c("rock", "pressure", "cars")) # options (for  both
# users & server)
),
mainPanel(
plotOutput( # define the graphical output (we're telling R that this output
"graph"   # container must contain a plot)
),
verbatimTextOutput( # define the graphical output (we're telling R that
"summary"   # this output container must contain a Verbatim output)
)
)
)
)
server <- function(input, output){
output$graph <- renderPlot({
if(input$dataset == "rock"){ # call the input and its options with their label
data <- rock
} else if (input$dataset == "pressure" ){
data <- pressure
} else if (input$dataset == "cars") {
data <- cars
}
plot(data[, c(1:2)])
})
output$summary <- renderPrint({
if(input$dataset == "rock"){
data <- rock
} else if (input$dataset == "pressure" ){
data <- pressure
} else if (input$dataset == "cars") {
data <- cars
}
summary(data[, c(1:2)])
})
}
#| echo: true
shinyApp(ui, server)
server <- function(input, output){
values <- reactiveValues() # create the shelf with reactive values
dataInput <- reactive({ # create a reactive environment (it reacts to whatever input receives)
if(input$dataset == "rock"){ # this part is the same as before
data <- rock
} else if (input$dataset == "pressure" ){
data <- pressure
} else if (input$dataset == "cars") {
data <- cars
}
})
observe({                      # ta-da, the shelf is in action. To make it works,telling R
values$data <- data.frame(dataInput()) #  it has to be called inside an observe function,
})                                       # we're using a reactive object
output$graph <- renderPlot({
plot(values$data[, c(1:2)]) # call the shelf and you're all set
})
output$summary <- renderPrint({
summary(values$data)
})
}
#| echo: true
#| eval: false
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = list("rock" = 1,
"pressure" = 2,
"cars" = 3)),
actionButton("load", "Select dataset")
),
mainPanel(
plotOutput(
"graph"
),
verbatimTextOutput(
"summary"
))))
#| echo: true
server <- function(input, output){
dataInput <- eventReactive(input$load, {
if(input$dataset == 1){
data <- rock
} else if (input$dataset == 2 ){
data <- pressure
} else if (input$dataset == 3) {
data <- cars
}
}
)
output$graph <- renderPlot({
data <- dataInput()
plot(data[, c(1:2)])
})
output$summary <- renderPrint({
data <- dataInput()
summary(data[, c(1:2)])
})
}
#| echo: true
#| eval: false
shinyApp(ui, server)
#| echo: true
ui <- fluidPage( # same as before
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = list("rock" = 1,
"pressure" = 2,
"cars" = 3)),
actionButton("load",
"Upload data")
),
mainPanel(
plotOutput(
"graph"
),
verbatimTextOutput(
"summary"
)
) # display output
)
)
#| echo: true
server <- function(input, output){
values <- reactiveValues()
dataInput <- reactive({
if(input$dataset == 1){
data <- rock
} else if (input$dataset == 2 ){
data <- pressure
} else if (input$dataset == 3) {
data <- cars
}
})
observeEvent(input$load, {
values$data <- data.frame(dataInput())
})
output$graph <- renderPlot({
validate(
need(input$load > 0,
"Waiting for data")
)
plot(values$data[, c(1:2)])
})
output$summary <- renderPrint({
validate(
need(input$load > 0, "Waiting for data")
)
summary(values$data)
})
}
#| echo: true
#| eval: false
shinyApp(ui, server)
