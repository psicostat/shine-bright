#| echo: true
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset", # name of the input (for the server)
label = "Choose a dataset:", # name of the input (for the users)
choices = c("rock", "pressure", "cars")) # options (for  both
# users & server)
),
mainPanel(
plotOutput( # define the graphical output (we're telling R that this output
"graph"   # container must contain a plot)
),
verbatimTextOutput( # define the graphical output (we're telling R that
"summary"   # this output container must contain a Verbatim output)
)
)
)
)
libr
library(shiny)
#| echo: true
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset", # name of the input (for the server)
label = "Choose a dataset:", # name of the input (for the users)
choices = c("rock", "pressure", "cars")) # options (for  both
# users & server)
),
mainPanel(
plotOutput( # define the graphical output (we're telling R that this output
"graph"   # container must contain a plot)
),
verbatimTextOutput( # define the graphical output (we're telling R that
"summary"   # this output container must contain a Verbatim output)
)
)
)
)
server <- function(input, output){
output$graph <- renderPlot({
if(input$dataset == "rock"){ # call the input and its options with their label
data <- rock
} else if (input$dataset == "pressure" ){
data <- pressure
} else if (input$dataset == "cars") {
data <- cars
}
plot(data[, c(1:2)])
})
output$summary <- renderPrint({
if(input$dataset == "rock"){
data <- rock
} else if (input$dataset == "pressure" ){
data <- pressure
} else if (input$dataset == "cars") {
data <- cars
}
summary(data[, c(1:2)])
})
}
#| echo: true
shinyApp(ui, server)
server <- function(input, output){
values <- reactiveValues() # create the shelf with reactive values
dataInput <- reactive({ # create a reactive environment (it reacts to whatever input receives)
if(input$dataset == "rock"){ # this part is the same as before
data <- rock
} else if (input$dataset == "pressure" ){
data <- pressure
} else if (input$dataset == "cars") {
data <- cars
}
})
observe({                      # ta-da, the shelf is in action. To make it works,telling R
values$data <- data.frame(dataInput()) #  it has to be called inside an observe function,
})                                       # we're using a reactive object
output$graph <- renderPlot({
plot(values$data[, c(1:2)]) # call the shelf and you're all set
})
output$summary <- renderPrint({
summary(values$data)
})
}
#| echo: true
#| eval: false
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = list("rock" = 1,
"pressure" = 2,
"cars" = 3)),
actionButton("load", "Select dataset")
),
mainPanel(
plotOutput(
"graph"
),
verbatimTextOutput(
"summary"
))))
#| echo: true
server <- function(input, output){
dataInput <- eventReactive(input$load, {
if(input$dataset == 1){
data <- rock
} else if (input$dataset == 2 ){
data <- pressure
} else if (input$dataset == 3) {
data <- cars
}
}
)
output$graph <- renderPlot({
data <- dataInput()
plot(data[, c(1:2)])
})
output$summary <- renderPrint({
data <- dataInput()
summary(data[, c(1:2)])
})
}
#| echo: true
#| eval: false
shinyApp(ui, server)
#| echo: true
ui <- fluidPage( # same as before
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = list("rock" = 1,
"pressure" = 2,
"cars" = 3)),
actionButton("load",
"Upload data")
),
mainPanel(
plotOutput(
"graph"
),
verbatimTextOutput(
"summary"
)
) # display output
)
)
#| echo: true
server <- function(input, output){
values <- reactiveValues()
dataInput <- reactive({
if(input$dataset == 1){
data <- rock
} else if (input$dataset == 2 ){
data <- pressure
} else if (input$dataset == 3) {
data <- cars
}
})
observeEvent(input$load, {
values$data <- data.frame(dataInput())
})
output$graph <- renderPlot({
validate(
need(input$load > 0,
"Waiting for data")
)
plot(values$data[, c(1:2)])
})
output$summary <- renderPrint({
validate(
need(input$load > 0, "Waiting for data")
)
summary(values$data)
})
}
#| echo: true
#| eval: false
shinyApp(ui, server)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = list("rock" = 1,
"pressure" = 2,
"cars" = 3,
"I want to use my data!!" =4)), # we add an option
# Let me introduce you Mr. Conditional Panel
conditionalPanel(
condition = "input.dataset == '4'", # What is the condition for which I should show up?
# What should be displayed inside me once I show up?
fileInput("example",  # label for the server
"Wow my data set!",
accept = c("csv")) # what format do we accept?
),
actionButton("load", "Upload data")
),
mainPanel(
plotOutput(
"graph"
),
verbatimTextOutput(
"summary"
)
)
)
),
server = function(input, output){
values <- reactiveValues()
dataInput <- reactive({
if(input$dataset == 1){
data <- rock
} else if (input$dataset == 2 ){
data <- pressure
} else if (input$dataset == 3) {
data <- cars
} else if (input$dataset == 4) {
data <- read.csv(input$example$datapath) # we call the input for the data
#import by its label and we ask for the data path selected by the user
}
})
observeEvent(input$load, # we load the data set (whatever it is only once the
#  user has hit the button)
{
values$data <- data.frame(dataInput())
})
output$graph <- renderPlot({
validate(
need(input$load > 0, "Waiting for data")
)
if (any(colnames(values$data) == "condition") ){ # I had to change the code
#just for the new data set, which is different from all the others
# check if there are characters
if (any(sapply(values$data, is.character)) == TRUE) {
values$data[, sapply(values$data, is.character) == T] = lapply(values$data[, sapply(values$data, is.character) == T],
as.factor)
} else {
values$data = values$data
}
plot(values$data$tr ~ values$data$condition,
xlab = "Condition", ylab = "TR")
} else {
plot(values$data[, c(1:2)])
}
})
output$summary <- renderPrint({
validate(
need(input$load > 0, "Waiting for data")
)
if (any(colnames(values$data) == "condition") ){
summary(values$data[, c(2:3)])
} else {
summary(values$data[, c(1:2)])
}
})
},
options = list(height = 800)
)
library(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = list("rock" = 1,
"pressure" = 2,
"cars" = 3,
"I want to use my data!!" =4)), # we add an option
# Let me introduce you Mr. Conditional Panel
conditionalPanel(
condition = "input.dataset == '4'", # What is the condition for which I should show up?
# What should be displayed inside me once I show up?
fileInput("example",  # label for the server
"Wow my data set!",
accept = c("csv")) # what format do we accept?
),
actionButton("load", "Upload data")
),
mainPanel(
plotOutput(
"graph"
),
verbatimTextOutput(
"summary"
)
)
)
),
server = function(input, output){
values <- reactiveValues()
dataInput <- reactive({
if(input$dataset == 1){
data <- rock
} else if (input$dataset == 2 ){
data <- pressure
} else if (input$dataset == 3) {
data <- cars
} else if (input$dataset == 4) {
data <- read.csv(input$example$datapath) # we call the input for the data
#import by its label and we ask for the data path selected by the user
}
})
observeEvent(input$load, # we load the data set (whatever it is only once the
#  user has hit the button)
{
values$data <- data.frame(dataInput())
})
output$graph <- renderPlot({
validate(
need(input$load > 0, "Waiting for data")
)
if (any(colnames(values$data) == "condition") ){ # I had to change the code
#just for the new data set, which is different from all the others
# check if there are characters
if (any(sapply(values$data, is.character)) == TRUE) {
values$data[, sapply(values$data, is.character) == T] = lapply(values$data[, sapply(values$data, is.character) == T],
as.factor)
} else {
values$data = values$data
}
plot(values$data$tr ~ values$data$condition,
xlab = "Condition", ylab = "TR")
} else {
plot(values$data[, c(1:2)])
}
})
output$summary <- renderPrint({
validate(
need(input$load > 0, "Waiting for data")
)
if (any(colnames(values$data) == "condition") ){
summary(values$data[, c(2:3)])
} else {
summary(values$data[, c(1:2)])
}
})
},
options = list(height = 800)
)
# other app -----
shinyApp(ui = selectInput(inputId = "mySelection",
label = h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1)
verbatimTextOutput(
# other app -----
shinyApp(ui = selectInput(inputId = "mySelection",
label = h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1),
verbatimTextOutput(
outputId = "myOutput"
),
server = function(input, output) {
output$myOutput = renderPrint({
paste(paste("This is my choice"), input$mySelection)
})
})
library(shiny)
# other app -----
shinyApp(ui = selectInput(inputId = "mySelection",
label = h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1),
verbatimTextOutput(
outputId = "myOutput"
),
server = function(input, output) {
output$myOutput = renderPrint({
paste(paste("This is my choice"), input$mySelection)
})
})
# other app -----
shinyApp(ui = fluidPage(selectInput(inputId = "mySelection",
label = h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1),
verbatimTextOutput(
outputId = "myOutput"
)),
server = function(input, output) {
output$myOutput = renderPrint({
paste(paste("This is my choice"), input$mySelection)
})
})
knitr::include_graphics("www/porject.png")
runApp('appExamples/basic-App.R')
runApp('brokenApp.R')
runApp('appExamples/broken-shelf.R')
184-171
186-171
43-29
47-29
60-29
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='ottaviae',
token='ACCE4C164C49E808DE6921D1DFF87A0B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ottaviae',
token='ACCE4C164C49E808DE6921D1DFF87A0B',
secret='K9lJMrMbZMWWu35FjYTnlMQ8ddpeYXowcnAI9Y/f')
runApp('appExamples/interactive-graphs.R')
rsconnect::deployApp('appExamples/interactive-graphs.R')
runApp('interactive-graphs')
rsconnect::deployApp('appExamples/interactive-graphs')
rsconnect::deployApp('interactive-graphs')
