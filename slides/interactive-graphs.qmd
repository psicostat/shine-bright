---
title: "Interactive graphs"
author: "Ottavia M. Epifania"
format: 
  revealjs: 
    page-layout: custom
    theme: solarized
server: shiny
---

## 

```{r}
#| panel: sidebar
selectInput(inputId = "dataset",
                               label = "",
                               choices = list("rock" = 1,
                                              "pressure" = 2,
                                              "cars" = 3,
                                              "I want to use my data!!" =4))
 conditionalPanel(condition = "input.dataset == '4'",
                  fileInput("example","", accept = c("csv")))
actionButton("load", "Upload data")
conditionalPanel(condition = "input.load >= '1'",  
                     uiOutput("var1"),                
                     uiOutput("var2"),                 
                     actionButton("select", "Select & Display") 
                   )
```

```{r}
#| panel: fill
plotOutput("graph",
          click = clickOpts(id = "plot_click"), 
          brush = brushOpts(id = "plot_brush") 
        ) 
fluidRow(column(4,  
                 verbatimTextOutput(
                   "points"
                 )
          ),
          column(4,
                 verbatimTextOutput(
                   "brush"
                 ))
        )
```

```{r}
#| context: server
values <- reactiveValues()
    dataInput <- reactive({
      if(input$dataset == 1){
        data <- rock
      } else if (input$dataset == 2 ){
        data <- pressure
      } else if (input$dataset == 3) {
        data <- cars
      } else if (input$dataset == 4) {
        data <- read.csv(input$example$datapath)
      }
    })
    observeEvent(input$load, {
      values$data <- data.frame(dataInput())
      # check the characters
      if (any(sapply(values$data, is.character)) == TRUE) {
        values$data[, sapply(values$data, is.character) == T] = lapply(values$data[, sapply(values$data, is.character) == T], as.factor)
      } else {
        values$data = values$data
      }
    })
output$var1 <- renderUI({    
      nam <- colnames(values$data) 
      selectInput("var1", label = "Select x:", 
                  choices = c(nam), multiple = F,
                  selected = nam[1])
    })
    
output$var2 <- renderUI({
      nam2 <- colnames(values$data) 
      selectInput("var2", label = "Select y:",
                  choices = c(nam2), multiple = F,
                  selected = nam2[1])
    })
    
    newdata <- observeEvent(input$select, 
                            { # wait for you to decide before acting
                              # Besides, you're creating a new (smaller) object
                              values$df <- values$data[c(input$var1, input$var2)]
                            })
    output$graph <- renderPlot({
      validate(
        need(input$select > 0, "Waiting for data") 
      )                                        # load to select
      
      df = values$df
      plot(df[, c(1:2)]) # use it normally
      
      
    })
output$points <- renderPrint({
      df <- values$df # store the data frame in an object
      pointID <- nearPoints(df, # the data frame
                            input$plot_click, # the command for a reaction
                            xvar = names(df)[colnames(df) == input$var1], # xvar of the graph
                            yvar = names(df)[colnames(df) == input$var2], # yvar of the graph,
                            addDist = FALSE)
      validate(
        need(nrow(pointID) != 0, "Click on a point") # Waiting message
      )
      pointID
    })
    
    output$brush <- renderPrint({
      df <- values$df # store the data frame in an object
      brushID <- brushedPoints(df,# the  data frame
                               input$plot_brush, # the command for a reaction
                               xvar = names(df)[colnames(df) == input$var1], # xvar of the graph
                               yvar = names(df)[colnames(df) == input$var2] # yvar of the graph
      )
      validate(
        need(nrow(brushID) != 0, "Highlight Area") # Waiting message
      )
      brushID
    })
    
```


## The code 

::: {.panel-tabset}

## UI 

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|19-22|20,24|21,25|"
ui = sidebarLayout(
  sidebarPanel(
  selectInput(inputId = "dataset",
                               label = "",
                               choices = list("rock" = 1,
                                              "pressure" = 2,
                                              "cars" = 3,
                                              "I want to use my data!!" =4)),
 conditionalPanel(condition = "input.dataset == '4'",
                  fileInput("example","", accept = c("csv"))),
actionButton("load", "Upload data"),
conditionalPanel(condition = "input.load >= '1'",  
                     uiOutput("var1"),                
                     uiOutput("var2"),                 
                     actionButton("select", "Select & Display") 
                   )
  ), 
mainPanel(
  plotOutput("graph",
          click = clickOpts(id = "plot_click"), 
          brush = brushOpts(id = "plot_brush") 
        ),
fluidRow(
        column(4, verbatimTextOutput("points")),
        column(4,verbatimTextOutput("brush"))
        )
)
)
```

## Server

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|44-53|54-62|"
server = function(input, output) {
  values <- reactiveValues()
    dataInput <- reactive({
      if(input$dataset == 1){
        data <- rock
      } else if (input$dataset == 2 ){
        data <- pressure
      } else if (input$dataset == 3) {
        data <- cars
      } else if (input$dataset == 4) {
        data <- read.csv(input$example$datapath)
      }
    })
observeEvent(input$load, {
      values$data <- data.frame(dataInput())
      if (any(sapply(values$data, is.character)) == TRUE) {
        values$data[, sapply(values$data, is.character) == T] = lapply(values$data[, sapply(values$data, is.character) == T], as.factor)
      } else {
        values$data = values$data
      }
    })
output$var1 <- renderUI({    
      nam <- colnames(values$data) 
      selectInput("var1", label = "Select x:", 
                  choices = c(nam), multiple = F,
                  selected = nam[1])
    })
output$var2 <- renderUI({
      nam2 <- colnames(values$data) 
      selectInput("var2", label = "Select y:",
                  choices = c(nam2), multiple = F,
                  selected = nam2[1])
    })
newdata <- observeEvent(input$select, 
                            { # wait for you to decide before acting
                              # Besides, you're creating a new (smaller) object
                              values$df <- values$data[c(input$var1, input$var2)]
                            })
output$graph <- renderPlot({
      validate(need(input$select > 0, "Waiting for data") )                         
      df = values$df
      plot(df[, c(1:2)]) # use it normally
    })
output$points <- renderPrint({
      df <- values$df #
      pointID <- nearPoints(df, 
                            input$plot_click, 
                            xvar = names(df)[colnames(df) == input$var1], 
                            yvar = names(df)[colnames(df) == input$var2], 
                            addDist = FALSE)
      validate(need(nrow(pointID) != 0, "Click on a point"))
      pointID
    })
output$brush <- renderPrint({
      df <- values$df 
      brushID <- brushedPoints(df,
                               input$plot_brush,
                               xvar = names(df)[colnames(df) == input$var1],
                               yvar = names(df)[colnames(df) == input$var2])
      validate(need(nrow(brushID) != 0, "Highlight Area"))
      brushID
    })
}
```


:::
