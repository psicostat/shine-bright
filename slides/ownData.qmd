---
title: "Fluid code :)"
author: "Ottavia M. Epifania"
format: 
  revealjs: 
    page-layout: custom
server: shiny
---

```{r}
#| include: false
library(emoji)
```


# Why did I break? 

## Look at the code

`appExamples/brokenApp-dataUpload.R`

::: {.panel-tabset}

## UI 


```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|3-8|10-16|11|"
ui = fluidPage(
  sidebarLayout(sidebarPanel(
      selectInput(inputId = "dataset",
                  label = "Choose a dataset:",
                  choices = list("rock" = 1, 
                                 "pressure" = 2,
                                 "cars" = 3,
                                 "I want to use my data!!" =4)), 
      # Let me introduce you Mr. Conditional Panel
      conditionalPanel(
        condition = "input.dataset == '4'", # What is the condition for which I should show up?
        # What should be displayed inside me once I show up?
        fileInput("example",  # label for the server
                  "", # no displayed label for users
                  accept = c("csv")) # what format do we accept?
      ),
      actionButton("load", "Upload data")
    ),
    mainPanel(
      plotOutput(
        "graph"
      ),
      verbatimTextOutput(
        "summary"
      )
    ) # display output
  )
)
```



## Server

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|18, 25|31,33|"
server = function(input, output){
  values <- reactiveValues()
  dataInput <- reactive({
    if(input$dataset == 1){ 
      data <- rock
    } else if (input$dataset == 2 ){
      data <- pressure
    } else if (input$dataset == 3) {
      data <- cars
    } else if (input$dataset == 4) {
      data <- read.csv(input$example$datapath) 
    }
  })
observeEvent(input$load, {
    values$data <- data.frame(dataInput())
  })
output$graph <- renderPlot({
    validate(need(input$load > 0, "Waiting for data"))
if (any(colnames(values$data) == "condition") ){ 
  if (any(sapply(values$data, is.character)) == TRUE) {
  values$data[, sapply(values$data, is.character) == T] = lapply(values$data[,   sapply(values$data, is.character) == T], as.factor)
      } else {
  values$data = values$data
    }
plot(values$data$tr ~ values$data$condition, xlab = "Condition", ylab = "TR")
} else {
      plot(values$data[, c(1:2)])
    }
})
output$summary <- renderPrint({
    validate(need(input$load > 0, "Waiting for data"))
  if (any(colnames(values$data) == "condition") ){
      summary(values$data[, c(2:3)])
    } else {
      summary(values$data[, c(1:2)])
    }
  })
}
```




:::

## Code has to be fluid and adapt to everything 

```{r, out.width = "35%", fig.align='center', echo = FALSE}
knitr::include_graphics("www/liquid-cats.jpg")
```


We have the code for uploading a data frame. 

The code  is designed to work for that specific data frame 

If only we had a way to explore the data frame columns and choose the ones we would like to plot `r emoji("thinking")`

## Way better :) 

```{r}
#| panel: sidebar
  selectInput(inputId = "dataset",
                  label = "Choose a dataset:",
                  choices = list("rock" = 1,
                                 "pressure" = 2,
                                 "cars" = 3,
                                 "I want to use my data!!" =4))
      
conditionalPanel(
        condition = "input.dataset == '4'",
        fileInput("example",
                  "", accept = c("csv"))
      ) 
actionButton("load", "Upload data") # This is the button for uploading 
conditionalPanel(                    # It appears only when the data are 
        condition = "input.load >= '1'",   # loaded
        uiOutput("var1"),                 # contains the name for variable 1
        uiOutput("var2"),                 # contains the name for variable 2
        actionButton("select", "Select & Display"))
```

```{r out.width="30%"}
#| panel: fill
 plotOutput("graph" )
verbatimTextOutput("summary")

```



```{r}
#| context: server
values <- reactiveValues()
  dataInput <- reactive({
    if(input$dataset == 1){
      data <- rock
    } else if (input$dataset == 2 ){
      data <- pressure
    } else if (input$dataset == 3) {
      data <- cars
    } else if (input$dataset == 4) {
      data <- read.csv(input$example$datapath)
    }
  })
observeEvent(input$load, {
    values$data <- data.frame(dataInput())
    # check the characters
    if (any(sapply(values$data, is.character)) == TRUE) {
      values$data[, sapply(values$data, is.character) == T] = lapply(values$data[, sapply(values$data, is.character) == T], as.factor)
    } else {
      values$data = values$data
      }
  })
  
output$var1 <- renderUI({    # remember variable 1? here it is how we extract it
    nam <- colnames(values$data) # from the data set
    selectInput("var1", label = "Select x:", # create the input
                choices = c(nam), multiple = FALSE,
                selected = nam[1])
  })
  
output$var2 <- renderUI({
    nam2 <- colnames(values$data) # create the input for variable 2
    selectInput("var2", label = "Select y:",
                choices = c(nam2), multiple = FALSE,
                selected = nam2[1])
  })
  
newdata <- observeEvent(input$select, # use observe event so that the app will 
                          { # wait for you to decide before acting
                            # Besides, you're creating a new (smaller) object
                            values$df <- values$data[c(input$var1, input$var2)]
                          })
output$graph <- renderPlot({
    validate(
      need(input$select > 0, "Waiting for data") # I changed the validation from
    )                                        # load to select
    
    df <- values$df # store the new object into an R object
    plot(df[, c(1:2)]) # use it normally
  })

output$summary <- renderPrint({
    validate(
      need(input$select > 0, "Waiting for data")
    ) 
    df <- values$df # same 
    summary(df[, c(1:2)])

  })
```

## A flow in a flow

::: {.panel-tabset}

## Step 0 

![](www/step0.png){width="450" height="300" fig-aling="center"}


## Step 1

![](www/step01.png){width="450" height="300"  fig-aling="center"}

## Step 2

![](www/step02.png){width="450" height="300"  fig-aling="center"}


## Step 3 

![](www/step03.png){width="450" height="300"  fig-aling="center"}
:::

## The code 

::: {.panel-tabset}

## UI 

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|14-18|15,16|"
ui = fluidPage(
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId = "dataset",
                  label = "Choose a dataset:",
                  choices = list("rock" = 1,
                                 "pressure" = 2,
                                 "cars" = 3,
                                 "I want to use my data!!" =4)),
      conditionalPanel(condition = "input.dataset == '4'",
        fileInput("example", "", accept = c("csv"))
      ), 
      actionButton("load", "Upload data"),                              
      conditionalPanel(condition = "input.load >= '1'",   
        uiOutput("var1"),                 
        uiOutput("var2"),                 
        actionButton("select", "Select & Display") 
      ),                              
    ),
    mainPanel(
      plotOutput(
        "graph"
      ),
    verbatimTextOutput(
        "summary"
      )
    ) 
  )
)
```


## Server 


```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|22-33|22-27|28-33|34-36|"
server = function(input, output){
  values <- reactiveValues()
  dataInput <- reactive({
    if(input$dataset == 1){
      data <- rock
    } else if (input$dataset == 2 ){
      data <- pressure
    } else if (input$dataset == 3) {
      data <- cars
    } else if (input$dataset == 4) {
      data <- read.csv(input$example$datapath)
    }
  })
observeEvent(input$load, {
    values$data <- data.frame(dataInput())
    if (any(sapply(values$data, is.character)) == TRUE) {
      values$data[, sapply(values$data, is.character) == T] = lapply(values$data[, sapply(values$data, is.character) == T], as.factor)
    } else {
      values$data = values$data
      }
  })
output$var1 <- renderUI({   
    nam <- colnames(values$data)
    selectInput("var1", label = "Select x:", 
                choices = c(nam), multiple = FALSE,
                selected = nam[1])
  })
output$var2 <- renderUI({
    nam2 <- colnames(values$data) 
    selectInput("var2", label = "Select y:",
                choices = c(nam2), multiple = FALSE,
                selected = nam2[1])
  })
newdata <- observeEvent(input$select, { 
  values$df <- values$data[c(input$var1, input$var2)]
                          })
output$graph <- renderPlot({
    validate( need(input$select > 0, "Waiting for data"))          
df <- values$df 
    plot(df[, c(1:2)]) 
  })
output$summary <- renderPrint({
    validate(need(input$select > 0, "Waiting for data")) 
    df <- values$df # same 
    summary(df[, c(1:2)])
  })
}
```



## Together

```{r}
#| echo: true
#| eval: false
shinyApp(ui, server)
```



:::


